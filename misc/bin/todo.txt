#!/usr/bin/env python
#
# rotsix - (c) wtfpl 2017
# a smal todo list manager using notify-send

import getopt
import os, sys
from subprocess import call


# image is used by notify-send, set to "" to disable
home = os.environ['HOME']
#image = f"{home}/usr/wallpapers/pattern/wall.png"
image = f"{home}/bin/todo-icon.svg"


def usage():
	print('todo [-r | --read] # default option')
	print('todo [-i | --insert] <number> <note>')
	print("todo [-m | --move] '<origine> <destination>' /!\\")
	print('todo [-a | --add] <note>')
	print('todo [-d | --delete] <number>')
	print('todo [-c | --clean]')


def move(orig, dest):
	# lol, easy
	tmp = delete(orig)
	insert(dest-1, tmp.replace("\n", ""))
	popup()


def insert(number, note):
	# get current lines
	try:
		todo_file = open(f"{home}/.todo", "r")
		lines = todo_file.readlines()
		todo_file.close()
	except FileNotFoundError:
		print("Sorry, $HOME/.todo doesn't exist.")
		print("Add an element and it will work properly again!")
		usage()
		sys.exit(1)

	if number == len(lines):
		add(note)
	elif number < 0 or number > len(lines):
		print("You can't insert this note here")
		usage()
		sys.exit(1)

	# adding
	lines.insert(number, note + "\n")

	# writing
	todo_file = open(f"{home}/.todo", "w")
	for i in lines:
		todo_file.write(i)

	# closing
	todo_file.close()

	popup()


def add(note):
	# now we open
	global home
	todo_file = open(f"{home}/.todo", "a")

	# now we add
	todo_file.write(note + "\n")

	# now we close
	todo_file.close()

	# and final pop-up
	popup()

	# return the added item
	return note


def delete(number):
	# now we open
	try:
		todo_file = open(f"{home}/.todo", "r")
		lines = todo_file.readlines()
		todo_file.close()
	except FileNotFoundError:
		print("Sorry, $HOME/.todo doesn't exist.")
		print("Add an element and it will work properly again!")
		usage()
		sys.exit(1)

	todo_file = open(f"{home}/.todo", "w")

	# now we delete
	if len(lines) != 0 and (number <= 0 or number > len(lines)):
		todo_file.close()
		usage()
		print("You can't delete a note that doesn't exist")
		sys.exit(1)


	# putting back
	tmp = None
	for i in range(len(lines)):
		if i != number-1:
			todo_file.write(lines[i])
		else:
			tmp = lines[i]

	# now we close
	todo_file.close()

	# and final pop-up
	popup()

	# return the deleted item
	return tmp


def popup():
	global image

	# now we open/read/close
	global home
	try:
		todo_file = open(f"{home}/.todo", "r")
	except FileNotFoundError:
		print("Sorry, $HOME/.todo doesn't exist.")
		print("Add an element and it will work properly again!")
		usage()
		sys.exit(1)

	todo = todo_file.read();
	todo_file.close()

	# formating text
	todo = todo.split("\n")

	# message for notify-send
	mess = "<span foreground='#75507b'> Todo Weekday</span>\n<span foreground='#627a92'> ============</span>\n<span foreground='#b2a191'>"

	i = 1
	for note in todo:
		if i == len(todo):
			break

		if i == len(todo) - 1:
			mess += f"{str(i)}. {note}"
		else:
			mess += f"{str(i)}. {note}\n"

		i += 1

	if len(todo) == 1:
		mess += "No tasks."

	mess += "</span>"


	# and final popup
	call(["notify-send","-i",image,mess])


def clean():
	global home
	try:
		todo_file = open(f"{home}/.todo", "w")
		todo_file.close()
	except FileNotFoundError:
		print(f"Sorry, {home}/.todo doesn't exist.")
		sys.exit(1)

	popup()


def main(argv):
	if len(argv) == 0:
		popup()
		sys.exit(0)

	try:
		opts, argv = getopt.getopt(argv,"hi:a:d:m:rc",["help","insert", "add","delete","move","read","clean"])

	except getopt.GetoptError:
		usage()
		sys.exit(1)

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
		elif opt in ("-i", "--insert"):
			try:
				number = int(arg)
			except ValueError:
				usage()
				sys.exit(1)
			insert(number, argv[0])
		elif opt in ("-a", "--add"):
			add(arg)
		elif opt in("-d", "--delete"):
			try:
				number = int(arg)
			except ValueError:
				usage()
				sys.exit(1)
			delete(number)
		elif opt in ("-r", "--read"):
			popup()
		elif opt in ("-c", "--clean"):
			clean()
		elif opt in ("-m", "--move"):
			tmp = arg.split(' ')
			try:
				tmp[0] = int(tmp[0])
				tmp[1] = int(tmp[1])
			except ValueError:
				usage()
				sys.exit(1)
			move(tmp[0], tmp[1])
			popup()


if __name__ == "__main__":
	main(sys.argv[1:])
